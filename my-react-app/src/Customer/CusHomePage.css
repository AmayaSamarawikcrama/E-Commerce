/* CusHomePage.css */

/*
  Theory: Global Box Model and Overflow Management
  By setting box-sizing to border-box globally, we ensure that padding and borders
  do not increase the final computed width of an element. This prevents many common
  layout issues. `overflow-x: hidden` on the body prevents horizontal scrollbars,
  acting as a safeguard against future overflow bugs.
*/
html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  width: 100%;
  background-color: #f8f8f8;
}

body {
  font-family: 'Playfair Display', serif;
  background-color: #f8f8f8;
  overflow-x: hidden;
  
}


/*
  Theory: Flexbox Full-Page Layout (Sticky Footer)
  We define the main page container as a flex column that takes up 100% of the
  viewport height (min-height: 100vh). The `width: 100%` (which is the default for a div)
  corrects the original overflow problem. The `content-wrap` inside will grow
  to push the footer to the bottom of the page.
*/
.luxury-home-page {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  width: 100%; /* Explicitly set to 100% to override any conflicting styles */
  background: linear-gradient(135deg, #f8f8f8, #fcfafa);
}

.content-wrap {
  flex-grow: 1;
}

.hero-home-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('https://images.unsplash.com/photo-1523275335684-37898b6baf30?q=80&w=1999&auto=format&fit=crop') no-repeat center center;
  background-size: cover;
  z-index: 1;
}

.hero-home-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgb(245, 243, 243);
  z-index: 2;
}

.hero-home-content {
  position: relative;
  z-index: 3;
  color: #fff;
}

.section-title {
  font-size: 2.5rem;
  color: #8B0000;
  font-weight: 700;
}